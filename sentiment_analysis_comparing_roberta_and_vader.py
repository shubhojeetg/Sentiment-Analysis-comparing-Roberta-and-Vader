# -*- coding: utf-8 -*-
"""Sentiment-Analysis-comparing-Roberta-and-Vader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1alLmqqMt45d_i5eqMWsi2RujcuNhJ5MO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from tqdm import tqdm
from transformers import AutoTokenizer, AutoModelForSequenceClassification
from scipy.special import softmax
from nltk.sentiment import SentimentIntensityAnalyzer

# Setup
plt.style.use('ggplot')
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')
nltk.download('vader_lexicon')

# Load Dataset
df = pd.read_csv('singapore_airlines_reviews.csv')  # Replace with your path
df = df.head(500)  # Optional: limit for testing

print(df.columns.tolist())

# Ask user to pick relevant columns
summary_col = input("\n Enter the name of the column that contains the review text (e.g., Summary, Review): ").strip()
rate_col = input(" Enter the name of the column that contains the rating (e.g., Rate, Rating): ").strip()

# Check if input columns exist
if summary_col not in df.columns or rate_col not in df.columns:
    raise ValueError(" The column names you entered do not exist in the dataset. Please check and run again.")

# Rename to standard names for further processing
df = df[[summary_col, rate_col]].rename(columns={summary_col: 'Summary', rate_col: 'Rate'})

# Basic Plot - Review count by rating
ax = df['Rate'].value_counts().sort_index().plot(kind='bar', title='Count of Reviews by Star', figsize=(10,6))
ax.set_xlabel('Review Stars')
plt.show()

# Setup VADER
sia = SentimentIntensityAnalyzer()

# Setup RoBERTa model
MODEL = "cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

# RoBERTa function
def polarity_scores_roberta(text):
    encoded_text = tokenizer(text, return_tensors='pt', truncation=True, max_length=512)
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)
    return {
        'roberta_neg': scores[0],
        'roberta_neu': scores[1],
        'roberta_pos': scores[2]
    }

# Apply sentiment analysis
res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    try:
        text = str(row['Summary'])
        vader_result = sia.polarity_scores(text)
        vader_result_rename = {f"vader_{k}": v for k, v in vader_result.items()}
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_result_rename, **roberta_result}
        res[text] = both
    except Exception as e:
        print(f"Broke for index {i}: {e}")

# Convert to DataFrame
results_df = pd.DataFrame(res).T.reset_index().rename(columns={'index': 'Summary'})
results_df = results_df.merge(df, on='Summary', how='left')

# Save to CSV
results_df.to_csv('sentiment_results.csv', index=False)

# Show sample
print(results_df[['Summary', 'Rate','vader_neg', 'vader_neu', 'vader_pos', 'vader_compound', 'roberta_pos', 'roberta_neg']].head())

# Plotting: Compound vs Rating
grouped = results_df.groupby('Rate')['vader_compound'].mean().reset_index()
grouped = grouped.sort_values('Rate')

sns.barplot(data=grouped, x='Rate', y='vader_compound')
plt.title('Average VADER Compound Score by Rating')
plt.show()

# Separate sentiment plots
fig, axs = plt.subplots(1, 3, figsize=(18, 6))
sns.barplot(data=results_df, x='Rate', y='vader_pos', ax=axs[0])
axs[0].set_title('VADER Positive')
sns.barplot(data=results_df, x='Rate', y='vader_neu', ax=axs[1])
axs[1].set_title('VADER Neutral')
sns.barplot(data=results_df, x='Rate', y='vader_neg', ax=axs[2])
axs[2].set_title('VADER Negative')
plt.tight_layout()
plt.show()

# Pairplot of all scores
sns.pairplot(data=results_df, vars=[
    'vader_neg', 'vader_neu', 'vader_pos', 'vader_compound',
    'roberta_neg', 'roberta_neu', 'roberta_pos'
], hue='Rate', palette='tab10')
plt.show()